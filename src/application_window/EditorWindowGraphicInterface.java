package application_window;

import application_library.*;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.TreeSet;

public class EditorWindowGraphicInterface extends javax.swing.JFrame {

    /**
     * Creates new form EditorWindowGraphicInterface
     */
    public EditorWindowGraphicInterface() {
        initComponents();
        
        questions = new ArrayList<>();
    }
    
    /**
     * Creates new form EditorWindowGraphicInterface
     * @param library Об'єкт бібліотеки для збереження введених тестів
     */
    public EditorWindowGraphicInterface(Library library) {
        this();       
        
        this.library = library;
    }
    
    public Library getLibrary(){
        return library;
    }
    
    public void setLibrary(Library lib){
        library = lib;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        helpWindowGraphicInterface1 = new application_window.HelpWindowGraphicInterface();
        jLabel_TestName = new javax.swing.JLabel();
        jLabel_QuestionNumber = new javax.swing.JLabel();
        jButton_PreviousQuest = new javax.swing.JButton();
        jButton_SaveQuest = new javax.swing.JButton();
        jButton_NextQuest = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel_AnswerNumber5 = new javax.swing.JLabel();
        jCB_Theme = new javax.swing.JComboBox();
        jLabel_AnswerNumber6 = new javax.swing.JLabel();
        jS_Variant_Number = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane_Question = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane_AnswersPane = new javax.swing.JTextPane();
        jButton_AddAnswer = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField_IndexesOfRightAnswers = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField_Cost = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_EditorsMenu = new javax.swing.JMenu();
        jMenuItem_Exit = new javax.swing.JMenuItem();
        jMenu_Help = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Редактор тесту");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel_TestName.setBackground(new java.awt.Color(204, 255, 204));
        jLabel_TestName.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel_TestName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_TestName.setText("НАЗВА ТЕСТУ");
        jLabel_TestName.setFocusable(false);
        jLabel_TestName.setMaximumSize(new java.awt.Dimension(500, 100));

        jLabel_QuestionNumber.setBackground(new java.awt.Color(204, 255, 204));
        jLabel_QuestionNumber.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel_QuestionNumber.setForeground(new java.awt.Color(153, 0, 0));
        jLabel_QuestionNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_QuestionNumber.setText("Номер питання");
        jLabel_QuestionNumber.setFocusable(false);

        jButton_PreviousQuest.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton_PreviousQuest.setText("Попереднє питання");
        jButton_PreviousQuest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_PreviousQuestMouseClicked(evt);
            }
        });

        jButton_SaveQuest.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton_SaveQuest.setText("ОК");
        jButton_SaveQuest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_SaveQuestMouseClicked(evt);
            }
        });

        jButton_NextQuest.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton_NextQuest.setText("Наступне питання");
        jButton_NextQuest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_NextQuestMouseClicked(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Введіть запитання:");
        jLabel1.setFocusable(false);
        jLabel1.setMaximumSize(new java.awt.Dimension(175, 23));
        jLabel1.setMinimumSize(new java.awt.Dimension(175, 23));

        jLabel_AnswerNumber5.setBackground(new java.awt.Color(204, 204, 204));
        jLabel_AnswerNumber5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel_AnswerNumber5.setText("Введіть назву теми:");
        jLabel_AnswerNumber5.setFocusable(false);

        jCB_Theme.setEditable(true);
        jCB_Theme.setName("jCB_Theme_Name"); // NOI18N

        jLabel_AnswerNumber6.setBackground(new java.awt.Color(204, 204, 204));
        jLabel_AnswerNumber6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel_AnswerNumber6.setText("Введіть номер варіанту:");
        jLabel_AnswerNumber6.setFocusable(false);

        jScrollPane1.setViewportView(jTextPane_Question);

        jTextPane_AnswersPane.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jScrollPane3.setViewportView(jTextPane_AnswersPane);

        jButton_AddAnswer.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton_AddAnswer.setLabel("Додати варіант відповіді");
        jButton_AddAnswer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_AddAnswerMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Правильні відповіді:");

        jTextField_IndexesOfRightAnswers.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Кількість балів за правильну відповідь на питання:");

        jTextField_Cost.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextField_Cost.setText("0");

        jMenu_EditorsMenu.setText("Меню");
        jMenu_EditorsMenu.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jMenuItem_Exit.setText("Завершити редагування");
        jMenuItem_Exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem_ExitMousePressed(evt);
            }
        });
        jMenu_EditorsMenu.add(jMenuItem_Exit);

        jMenuBar1.add(jMenu_EditorsMenu);

        jMenu_Help.setText("Допомога");
        jMenu_Help.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jMenu_Help.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu_HelpMousePressed(evt);
            }
        });
        jMenuBar1.add(jMenu_Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel_QuestionNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_TestName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel_AnswerNumber5, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel_AnswerNumber6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jS_Variant_Number, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField_Cost, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)
                            .addComponent(jCB_Theme, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField_IndexesOfRightAnswers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_AddAnswer)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(jButton_PreviousQuest)
                .addGap(18, 18, 18)
                .addComponent(jButton_SaveQuest, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_NextQuest, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_TestName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_QuestionNumber)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCB_Theme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_AnswerNumber5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jS_Variant_Number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_AnswerNumber6)
                    .addComponent(jLabel3)
                    .addComponent(jTextField_Cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_AddAnswer)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField_IndexesOfRightAnswers))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_PreviousQuest)
                    .addComponent(jButton_SaveQuest)
                    .addComponent(jButton_NextQuest))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_AddAnswerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_AddAnswerMouseClicked
        currentAnswresCount++;
        
        String currentText = jTextPane_AnswersPane.getText();
        String addText     = "\n" + SEPARATOR_VALUE + "\nВаріант відповіді " + 
                             Integer.toString(currentAnswresCount + 1) + ":";
                
        jTextPane_AnswersPane.setText(currentText + addText);
        jTextPane_AnswersPane.requestFocusInWindow();
    }//GEN-LAST:event_jButton_AddAnswerMouseClicked

    private void jButton_NextQuestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_NextQuestMouseClicked
        saveQuestion();
        
        questionCount++;
                        
        currentAnswresCount = 0;
        
        if(questionCount < questions.size()){
            Question quest = questions.get(questionCount);
            
            currentAnswresCount = quest.get_number_of_answers();
            
            prepareFields(quest.get_text(), quest.get_theme(), quest.get_own_variant(),
                          quest.get_cost(),packAnswers());    
            
            jTextField_IndexesOfRightAnswers.setText(packRightAnswers());
        }
        else{
            prepareFields();
        }
        
        jButton_PreviousQuest.setEnabled(true);
    }//GEN-LAST:event_jButton_NextQuestMouseClicked

    private void jButton_SaveQuestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_SaveQuestMouseClicked
        saveQuestion();
    }//GEN-LAST:event_jButton_SaveQuestMouseClicked

    private void saveQuestion(){
        String questionText  = jTextPane_Question.getText();
        String themeText     = (String) jCB_Theme.getSelectedItem();
        int    variantNumber = (int) jS_Variant_Number.getValue();
        float  cost          = Float.valueOf(jTextField_Cost.getText());
        
        int indexOfRightAnswers[] = parseIndexesOfRightAnswers();
        
        if(validationsData(questionText, themeText, variantNumber, cost)){
            Question question = new Question(questionText, themeText, variantNumber, cost);
        
            question.add_answers(parseAnswersText(), indexOfRightAnswers);
            question.swap_answers();
            
            if(questionCount == questions.size()){
                questions.add(question);
            }
            else{
                questions.remove(questionCount);
                questions.add(questionCount, question);
            }
            
            addAllItemsToCB();
            //jCB_Theme.addItem(themeText);
        } 
    }
    
    private void prepareFields(String questionText, String themeText, int variant, float cost, String answers){
        jTextPane_Question.setText(questionText);
        jTextField_IndexesOfRightAnswers.setText("1");
        jLabel_QuestionNumber.setText(Integer.toString(questionCount + 1));
        jCB_Theme.setSelectedItem(themeText);
        jS_Variant_Number.setValue(variant);
        jTextField_Cost.setText(Float.toString(cost));
        jTextPane_AnswersPane.setText(answers);
    }
    
    private void prepareFields(){
        jTextPane_Question.setText("");
        jCB_Theme.setSelectedItem(jCB_Theme.getItemAt(0).toString());
        setFirstAnswerSuffics();
        jTextField_IndexesOfRightAnswers.setText("1");
        jLabel_QuestionNumber.setText(Integer.toString(questionCount + 1));
    }
    
    private boolean validationsData(String questionText, String themeText, int variant, float cost){
        boolean result = true;
        
        jTextPane_Question.setBackground(Color.WHITE);
        jS_Variant_Number.setBackground(Color.WHITE);
        jTextField_Cost.setBackground(Color.WHITE);
        jCB_Theme.setBackground(Color.WHITE);
        jTextField_IndexesOfRightAnswers.setBackground(Color.WHITE);
        
        if(result && ("".equals(questionText) || "Введіть текст питання!".equals(questionText))){
            jTextPane_Question.setText("Введіть текст питання!");
            jTextPane_Question.setBackground(Color.RED);
            
            result = false;
        }
        
        if(result && variant < 0){
            jS_Variant_Number.setValue(0);
            jS_Variant_Number.setBackground(Color.RED);
            
            result = false;
        }
        
        if(result && cost < 0){
            jTextField_Cost.setText("0.0");            
            jTextField_Cost.setBackground(Color.RED);
            
            result = false;
        }
        
        if(result && "".equals(themeText)){
            jCB_Theme.setSelectedItem("Без теми");
        }
        
        return result;
    }
    
    private void jButton_PreviousQuestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_PreviousQuestMouseClicked
        saveQuestion();
        
        questionCount--;
        
        Question question = null;
        try{
            question = questions.get(questionCount);
            currentAnswresCount = question.get_number_of_answers();
        
            prepareFields(question.get_text(), question.get_theme(), 
                    question.get_own_variant(), question.get_cost(),packAnswers());   

            jTextField_IndexesOfRightAnswers.setText(packRightAnswers());

            if(questionCount == 0){
                jButton_PreviousQuest.setEnabled(false);
            }
        }
        catch (Exception e){
            questionCount = 0;
        } 
    }//GEN-LAST:event_jButton_PreviousQuestMouseClicked

    private String packRightAnswers(){
        String rightAnswers = "";
        
        ArrayList<Answer> answersList = questions.get(questionCount).get_answers_list();
        
        for(int i = 0; i < answersList.size(); i++){
            if(answersList.get(i).is_right()){
                rightAnswers += Integer.toString(i + 1) + ", ";
            }
        }
        
        //System.out.println("Правильні відповіді: " + rightAnswers);
        return rightAnswers.substring(0, rightAnswers.length() - 2);
    }
    
    private void setFirstAnswerSuffics(){
        jTextPane_AnswersPane.setText("\n" + SEPARATOR_VALUE + 
            "\nВаріант відповіді " + Integer.toString(currentAnswresCount + 1) +
                ":");
    }
    
    private void jMenuItem_ExitMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem_ExitMousePressed
        saveQuestion();
        library.updateQuestions(questions);
        
        Library.save_library(library, library.getPath());
        
        dispose();
    }//GEN-LAST:event_jMenuItem_ExitMousePressed

    private void jMenu_HelpMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu_HelpMousePressed
        helpWindowGraphicInterface1.setMode(HelpWindowGraphicInterface.EDIT_WINDOW_MODE);
        helpWindowGraphicInterface1.setVisible(true);
    }//GEN-LAST:event_jMenu_HelpMousePressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        library.updateQuestions(questions);        
        Library.save_library(library, library.getPath());
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        if(library.get_questions_count() > 0){
            questionCount = library.get_questions_count() - 1;
            
            questions = library.getQuestions();
            
            jButton_PreviousQuest.setEnabled(true);
            
            addAllItemsToCB();
            
            jTextField_IndexesOfRightAnswers.setText(packRightAnswers());
            jLabel_QuestionNumber.setText(Integer.toString(questionCount + 1));
            jTextPane_AnswersPane.setText(packAnswers());
            jTextPane_Question.setText(questions.get(questionCount).get_text());
            jCB_Theme.setSelectedItem((String)questions.get(questionCount).get_theme());
        }
        else{
            jButton_PreviousQuest.setEnabled(false);
            jCB_Theme.addItem("Без теми");
            setFirstAnswerSuffics();
        } 
        jLabel_QuestionNumber.setText(Integer.toString(questionCount + 1));

        
        jLabel_TestName.setText(library.get_test_name());
    }//GEN-LAST:event_formWindowOpened

    private void addAllItemsToCB(){
        TreeSet<String> set = new TreeSet<>();
        
        for(Question quest : questions){
            set.add(quest.get_theme());
        }
        
        for(String s : set){
            jCB_Theme.addItem(s);
        }
    }
    
    private String[] parseAnswersText(){
        String bufferText = jTextPane_AnswersPane.getText();
        
        String[] splitedBuffer = bufferText.split(SEPARATOR_VALUE);
		
		int spliedtBufferSize  = splitedBuffer.length - 1;
		
		if(currentAnswresCount != spliedtBufferSize){
			currentAnswresCount = spliedtBufferSize;
		}
		
		String[] result        = new String[spliedtBufferSize];
		
		for(int i = 1; i < (spliedtBufferSize + 1); i++){
			String unformattedAnswerText = splitedBuffer[i].trim();
			
			int indexStart  = unformattedAnswerText.indexOf(":") + 1;
			
			String answerText;
			
			if(indexStart > -1){
				 answerText = unformattedAnswerText.substring(indexStart);
				 
				 result[i - 1] = answerText.trim();
			}
                        else{
                            answerText = unformattedAnswerText;
                        }
		}
		
		return result;
//        String[] result   = new String[currentAnswresCount + 1];
//        
//        String bufferText = jTextPane_AnswersPane.getText();
//        
//        for(int i = 0; i < currentAnswresCount + 2; i++){
//            String delimText = "\n" + SEPARATOR_VALUE + "\nВаріант відповіді " + 
//                             Integer.toString(i + 1) + ":";
//            
//            String splitText[] = bufferText.split(delimText);
//            
//            if(splitText.length == 2){
//                if(!"".equals(splitText[0])){
//                    result[i - 1] = splitText[0];
//                }
//                bufferText = splitText[1];
//            }
//            else{
//                result[i - 1] = splitText[0];
//            }
//        }
//        
//        return result;
    }
    
    private String packAnswers(){
        String result = "";
        
        Question          question = questions.get(questionCount);
        ArrayList<Answer> answ     = question.get_answers_list();
        
        for(int i = 0; i < answ.size(); i++){
            result += "\n" + SEPARATOR_VALUE + "\nВаріант відповіді " + 
                    Integer.toString(i + 1) + ":" + answ.get(i).get_text();
        }
        
        return result;
    }
    
    private int[] parseIndexesOfRightAnswers(){
        String indexesText = jTextField_IndexesOfRightAnswers.getText();
        
        if(!"".equals(indexesText)){
            String splitString[] = indexesText.split("[,. ]+");
                
            ArrayList<Integer> list = new ArrayList<>();

            for(int i = 0; i < splitString.length; i++){
                int index = Integer.valueOf(splitString[i]) - 1;

                if(index <= currentAnswresCount){
                    list.add(index);
                }
            }

            int result[] = new int[list.size()];

            for(int i = 0; i < list.size(); i++){
                result[i] = list.get(i);
            }
            
            return result;
        }
        else{
            jTextField_IndexesOfRightAnswers.setText("1");

            jTextField_IndexesOfRightAnswers.setBackground(Color.red);

            return new int[]{0};       
        }
    }
    
    private void printQuestionsInfo(){
        System.out.println(Integer.toString(questionCount) + questions.get(questionCount).toString());     
    }
    
    private ArrayList<Question> questions;
    
    private int currentAnswresCount = 0;
    private int questionCount       = 0;
    
    private Library library;
    
    private final static String SEPARATOR_VALUE = "________________________________________________";
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private application_window.HelpWindowGraphicInterface helpWindowGraphicInterface1;
    private javax.swing.JButton jButton_AddAnswer;
    private javax.swing.JButton jButton_NextQuest;
    private javax.swing.JButton jButton_PreviousQuest;
    private javax.swing.JButton jButton_SaveQuest;
    private javax.swing.JComboBox jCB_Theme;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel_AnswerNumber5;
    private javax.swing.JLabel jLabel_AnswerNumber6;
    private javax.swing.JLabel jLabel_QuestionNumber;
    private javax.swing.JLabel jLabel_TestName;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_Exit;
    private javax.swing.JMenu jMenu_EditorsMenu;
    private javax.swing.JMenu jMenu_Help;
    private javax.swing.JSpinner jS_Variant_Number;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField_Cost;
    private javax.swing.JTextField jTextField_IndexesOfRightAnswers;
    private javax.swing.JTextPane jTextPane_AnswersPane;
    private javax.swing.JTextPane jTextPane_Question;
    // End of variables declaration//GEN-END:variables
}
